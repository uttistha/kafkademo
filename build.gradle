import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.8.0"
}

group = 'com.github.uttistha'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

dependencies {
    //spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    //kafka
    implementation 'org.springframework.kafka:spring-kafka'
    //confluent
    implementation 'io.confluent:kafka-avro-serializer:7.6.0'
    implementation 'io.confluent:kafka-schema-registry-client:7.6.0'
    //implementation 'io.confluent:kakfa-streams-avro-serde:7.6.0'
    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:kafka'
}

def generateAvro = tasks.register("generateAvro", GenerateAvroJavaTask) {
    stringType = "String"
    fieldVisibility = "PRIVATE"
    source='src/main/resources/avro/'
    outputDir=file('src/main/java/')
}

//sourceSets {
//    getByName('main') {
//        java.srcDir("$buildDir/generated")
//    }
//}

tasks.named('compileJava').configure {
   source=(generateAvro)
}

//tasks.named('test') {
//    useJUnitPlatform()
//}
